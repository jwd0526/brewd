// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password_hash,
    first_name,
    last_name,
    created_by
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, email, password_hash, first_name, last_name, features, active, email_verified, last_login, created_by, updated_by, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	CreatedBy    *int32 `json:"created_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Features,
		&i.Active,
		&i.EmailVerified,
		&i.LastLogin,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, first_name, last_name, features, active, email_verified, last_login, created_by, updated_by, created_at, updated_at, deleted_at FROM users
WHERE email = $1
AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Features,
		&i.Active,
		&i.EmailVerified,
		&i.LastLogin,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, first_name, last_name, features, active, email_verified, last_login, created_by, updated_by, created_at, updated_at, deleted_at FROM users
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.Features,
		&i.Active,
		&i.EmailVerified,
		&i.LastLogin,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    email = $2,
    password_hash = $3,
    first_name = $4,
    last_name = $5,
    features = $6,
    active = $7,
    email_verified = $8,
    last_login = $9,
    updated_by = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
AND deleted_at IS NULL
`

type UpdateUserParams struct {
	ID            int32              `json:"id"`
	Email         string             `json:"email"`
	PasswordHash  string             `json:"password_hash"`
	FirstName     string             `json:"first_name"`
	LastName      string             `json:"last_name"`
	Features      []byte             `json:"features"`
	Active        *bool              `json:"active"`
	EmailVerified *bool              `json:"email_verified"`
	LastLogin     pgtype.Timestamptz `json:"last_login"`
	UpdatedBy     *int32             `json:"updated_by"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Features,
		arg.Active,
		arg.EmailVerified,
		arg.LastLogin,
		arg.UpdatedBy,
	)
	return err
}
